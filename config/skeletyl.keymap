#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

// Modified keymap based on personal experience, with some improvements based on Miryoku layout.

#define QWERTY  0
#define COLDH   1
#define NAV     2
#define NUM     3
#define PRGRM   4
#define FUN     5
#define ILLUST  6
#define GAME    7

/ {
    behaviors {
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            #binding-cells = <2>;
            tapping-term-ms = <135>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        hmp: homerow_mods_pinky {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp A>, <&kp ESCAPE>;
        };

        htdance: htdance {
            compatible = "zmk,behavior-hold-tap";
            label = "HTDANCE";
            bindings = <&kp>, <&td0>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            flavor = "tap-preferred";
        };

        htsl: htsl {
            compatible = "zmk,behavior-hold-tap";
            label = "HTSL";
            bindings = <&lt>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
        };
    };

    combos {
        compatible = "zmk,combos";

        // Combos for media player.
        // I often switch songs while drawing, so I assign the
        // combos on left hand side.

        combo_med_next {
            timeout-ms = <50>;
            key-positions = <2 3>;
            bindings = <&kp C_NEXT>;
        };

        combo_med_prev {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp C_PREV>;
        };

        combo_med_pp {
            timeout-ms = <50>;
            key-positions = <1 4>;
            bindings = <&kp C_PP>;
        };

        combo_med_stop {
            timeout-ms = <50>;
            key-positions = <1 3>;
            bindings = <&kp C_STOP>;
        };

        combo_med_vol_up {
            timeout-ms = <50>;
            key-positions = <2 13>;
            bindings = <&kp C_VOL_UP>;
        };

        combo_med_vol_dn {
            timeout-ms = <50>;
            key-positions = <3 12>;
            bindings = <&kp C_VOL_DN>;
        };

        combo_med_mute {
            timeout-ms = <50>;
            key-positions = <12 14>;
            bindings = <&kp C_MUTE>;
        };

        // combo for toggling illust layer

        combo_tg_illust {
            timeout-ms = <50>;
            key-positions = <21 22 23>;
            bindings = <&tog 0>;
        };

        // Combo for toggling the Colemak layout

        combo_tg_colemak {
            timeout-ms = <50>;
            key-positions = <6 7 8>;
            bindings = <&tog 0>;
        };

        // Combo for toggling minimal game layout

        combo_tg_game {
            timeout-ms = <50>;
            key-positions = <7 8>;
            bindings = <&tog 0>;
        };

        // Combo for bluetooth control
        // (i.e. switch among the devices).

        combo_bt_next {
            timeout-ms = <50>;
            key-positions = <27 28>;
            bindings = <&bt BT_NXT>;
        };

        combo_bt_prev {
            timeout-ms = <50>;
            key-positions = <26 27>;
            bindings = <&bt BT_PRV>;
        };

        combo_bt_clr {
            timeout-ms = <50>;
            key-positions = <0 9>;
            bindings = <&bt BT_CLR>;
        };

        combo_bt_out_tog {
            timeout-ms = <50>;
            key-positions = <4 5>;
            bindings = <&out OUT_TOG>;
        };
    };

    macros {
        new_macro: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none>;
            label = "NEW_MACRO";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        qwerty {
            bindings = <
  &kp Q             &kp W  &kp E           &kp R                 &kp T        &kp Y      &kp U          &kp I      &kp O       &kp P
  &htdance RCTRL 0  &kp S  &kp D           &kp F                 &kp G        &kp H      &kp J          &kp K      &kp L       &kp SEMICOLON
  &kp Z             &kp X  &kp C           &kp V                 &kp B        &kp N      &kp M          &kp COMMA  &kp PERIOD  &kp FSLH
                           &sk LEFT_SHIFT  &htsl 1 LEFT_COMMAND  &kp SPACE    &kp ENTER  &kp BACKSPACE  &lt 0 ESC
            >;
        };

        layer_1 {
            bindings = <
  &kp N1                &kp N2          &kp N3          &kp N4          &kp N5            &kp N6  &kp N7  &kp N8  &kp N9  &kp N0
  &kp LA(LG(NUMBER_1))  &kp LA(LG(N2))  &kp LA(LG(N3))  &kp LA(LG(N4))  &kp LA(LG(N5))    &trans  &trans  &trans  &trans  &trans
  &kp LA(LG(N6))        &kp LA(LG(N7))  &kp LA(LG(N8))  &kp LA(LG(N9))  &kp LA(LG(N0))    &trans  &trans  &trans  &trans  &trans
                                        &bt BT_CLR_ALL  &trans          &trans            &trans  &trans  &trans
            >;
        };
    };
};
